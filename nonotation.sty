%Copyright 2018, Andrea Proietto
%Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
%
%The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
%
%THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

%=============================================
% AUTHOR'S NOTES
% 
% This is a personal undertaking which aims to disambiguate mathematical notation between all its branches. It is still in the very early stages...
%
% Currently, there is much regard for the cryptography branch, which is where this package was born, in tandem with my probability studies

\ProvidesPackage{nonotation}[2018/09/21 v0.3 The Notation]

% binom macro
\RequirePackage{amsmath}
% mathbb command, complement symbol and others
\RequirePackage{amssymb}
% More blackboard symbols
\RequirePackage{bbm}
% Symbol negation
\RequirePackage{centernot}

% Required for crypto games
\RequirePackage{tikz} % duh...
\usetikzlibrary{arrows,shadows} % shadow for the entities, arrow for the messages
\RequirePackage{xparse} % Improved environment definition


% These definiions relate to numerical sets
%
% The prime numbers
\newcommand{\primenum}{\mathbb{P}}
% The natural (non-negative) numbers
% NOTE: \natural is already defined as a musical symbol, hence the \nonneg name
\newcommand{\nonneg}{\mathbb{N}}
% The integers
\newcommand{\integer}{\mathbb{Z}}
% The rationals
\newcommand{\rational}{\mathbb{Q}}
% The real numbers
\newcommand{\real}{\mathbb{R}}
%
% NOTE: Generic n-size subsets of the natural integers are represented by their corresponding blackboard number, as the following command definitions suggest.
% This package implements the first two with specific names, because of their widespread use
%
% The generic singleton, to be interpreted as {0}. 
\newcommand{\singleton}{\mathbbm{1}}
% The generic doubleton, or binary set, to be interpreted as {0, 1}. Primarily used as a building block for binary strings
\newcommand{\binary}{\mathbbm{2}}

% Comfort macros
%
% Common ratios
\newcommand{\oneover}[1]{\frac{1}{#1}}
\newcommand{\half}{\frac{1}{2}}
% Negations
\newcommand{\notimplies}{\centernot\implies}

% Probability distributions
%
% Generic distribution
\newcommand{\probdist}{\mathcal{R}\textit{and}}
% Uniform distribution
\newcommand{\unifdist}{\mathcal{U}\kern -0.08em \textit{nif}}
% Binomial distribution
\newcommand{\binomdist}{\mathcal{B}\textit{inom}}
% Bernoulli distribution
\newcommand{\berdist}{\mathcal{B}\kern -0.08em \textit{er}}
% Bernoulli-Uniform, the fair coin
\newcommand{\coin}{\berdist(\binary)}
% Independency relation
\newcommand{\indep}{\perp\!\!\!\!\perp}
% Conditioned probability
\newcommand{\knowing}{\mathrel{|}}

% Probability operators
%
% Pick UAR [math mode]
\newcommand{\pickUAR}{\mathrel{{\leftarrow}\vcenter{\hbox{\scriptsize\rmfamily\upshape\!\!\textsf{\$}}}}}
% Evaluate distribution [math mode]
\newcommand{\evaluatesto}{\mathrel{\vcenter{\hbox{\scriptsize\rmfamily\upshape\textsf{\$}}} \!\!\! \rightarrow}}

% Similarities
\newcommand{\jaccsim}{\mathcal{J}\textit{acc}}
\newcommand{\hammsim}{\mathcal{H}\textit{amm}}

% Function classes and relations
%
% Comutational indistinguishability
\newcommand{\compindist}{\approx_\textsc{c}}
% Statistical indistinguishability
\newcommand{\statindist}{\approx_\textsc{s}}
% Polynomial function
\newcommand{\poly}{\mathcal{P}\!\textit{oly}}
% Negligible function
\newcommand{\negl}{\mathcal{N}\!\kern -0.08em \textit{egl}}
% Permutation, or ordering
\newcommand{\permut}{\mathcal{P}\textit{erm}}
\newcommand{\order}{\permut}

% Cryptography
%
% Default challenger
\newcommand{\challenger}{\textup{\textsf{C}}}
% Default adversary
\newcommand{\adversary}{\textup{\textsf{A}}}
% Default distinguisher
\newcommand{\distinguisher}{\textup{\textsf{D}}}

% Cryptogame [math mode]
\NewDocumentCommand{\cryptog}{m O{\Pi} O{\adversary}}{\textsc{Game}^{\textsc{#1}}_{#2, #3}}
% Hybrid game [math mode]
\NewDocumentCommand{\hybridg}{m O{\Pi} O{\adversary}}{\textsc{Hyb}^{\textsc{#1}}_{#2, #3}}

% Hardcore predicate
\newcommand{\hc}{\mathfrak{hc}}

% Cryptographic primitives
%
% Encrypt
\newcommand{\Enc}{\textup{\textsf{Enc}}}
% Decrypt
\newcommand{\Dec}{\textup{\textsf{Dec}}}
% Tag
\newcommand{\Tag}{\textup{\textsf{Tag}}}
% Verify
\newcommand{\Ver}{\textup{\textsf{Ver}}}

% Acronyms
%
% Independent and Identically Distributed
\newcommand{\iid}{\textsc{iid}}
% Uniformly At Random
\newcommand{\uar}{\textsc{uar}}
% Probabilistic Polynomial time
\newcommand{\ppt}{\textsc{ppt}}

% Secret Key Encryption
\newcommand{\ske}{\textsc{ske}}
% Public Key Encryption
\newcommand{\pke}{\textsc{pke}}
% Message Authentication Code
\newcommand{\mac}{\textsc{mac}}

% One-Way Function
\newcommand{\owf}{\textsc{owf}}
% One-Way Permutation
\newcommand{\owp}{\textsc{owp}}
% PseudoRandom Generator
\newcommand{\prg}{\textsc{prg}}
% PseudoRandom Function
\newcommand{\prf}{\textsc{prf}}
% PseudoRandom Permutation
\newcommand{\prp}{\textsc{prp}}
% TrapDoor Permutation
\newcommand{\tdp}{\textsc{tdp}}
% Collision Resistant Hash (function)
\newcommand{\crh}{\textsc{crh}}

% Chosen Plaintext Attack
\newcommand{\cpa}{\textsc{cpa}}
% Chosen Ciphertext Attack
\newcommand{\cca}{\textsc{cca}}
% Universally unForgeable from Chosen Message Attack
\newcommand{\ufcma}{\textsc{ufcma}}

% Discrete Logarithm assumption
\newcommand{\dl}{\textsc{dl}}
% Decisional Diffie-Hellman assumption
\newcommand{\ddh}{\textsc{ddh}}
% Computational Diffie-Hellman assumption
\newcommand{\cdh}{\textsc{cdh}}

% Goldreich-Goldwasser-Micali construct
\newcommand{\ggm}{\textsc{ggm}}
% Rivest-Shamir-Adleman
\newcommand{\rsa}{\textsc{rsa}}


%%%%%%%%%%%%%%%%%%%%%%%%
% Cryptosequences
%%%%%%%%%%%%%%%%%%%%%%%%

% Define counters
\newcounter{preinstance}
\newcounter{instancecount}
\newcounter{sequencecursor}
\newcounter{intransientfigure}
\setcounter{intransientfigure}{0}
\newcounter{looplabel}

% Helper macro for instantiating single figure floats on the fly
\newcommand{\cseqcraftfloat}{
    \ifnum\@floatpenalty<0\relax
    \else
        \setcounter{intransientfigure}{1}
        \begin{figure}[htbp]
        \centering
    \fi
}

% Styles
\tikzstyle{msgstyle}=[->, >=angle 60]
\tikzstyle{inststyle}=[rectangle, draw, anchor=west, minimum height=0.8cm, minimum width=1.6cm, fill=white, drop shadow={opacity=1,fill=black}]

% Internal commands
%
% Diagram spacing
\newcommand{\cseqdelay}{\stepcounter{sequencecursor}}

% Message: from, fromtext, msgtext, to, totext
\newcommand{\cseqmessager}[5]{
    \stepcounter{sequencecursor}
    \path (#1)+(0, -\thesequencecursor*\unitfactor-0.7*\unitfactor) 
        node (tail) {} node [anchor = east] {#2};
    \path (#4)+(0, -\thesequencecursor*\unitfactor-0.7*\unitfactor)
        node (head) {} node [anchor = west] {#5};
    \draw [msgstyle] (tail) -- (head)
        node [midway, above] {#3};
}

% Message: from, fromtext, msgtext, to, totext
\newcommand{\cseqmessagel}[5]{
    \stepcounter{sequencecursor}
    \path (#1)+(0, -\thesequencecursor*\unitfactor-0.7*\unitfactor) 
        node (tail) {} node [anchor = west] {#2};
    \path (#4)+(0, -\thesequencecursor*\unitfactor-0.7*\unitfactor)
        node (head) {} node [anchor = east] {#5};
    \draw [msgstyle] (tail) -- (head)
        node [midway, above] {#3};
}

% New participant
% \cseqentity[edge distance]{var}{name:class}
\newcommand{\cseqentity}[3][0]{
    \stepcounter{instancecount}
    \path (inst\thepreinstance.east)+(#1,0)
        node[inststyle] (inst\theinstancecount) {#3};
    \path (inst\theinstancecount)+(0,-0.5*\unitfactor)
        node (#2) {};
    \tikzstyle{instcolor#2}=[]
    \stepcounter{preinstance}
}

% Entity computation
\newcommand{\cseqcompute}[3]{
    \stepcounter{sequencecursor}
    \path (#1)+(0,-\thesequencecursor*\unitfactor-0.7*\unitfactor)
        node [anchor = #3] {#2};
}


% API Commands
%
% Challenger computation
\newcommand{\cseqchallenger}[1]{
    \cseqcompute{C}{#1}{west};
}
% Adversary computation - optional orientation as first argument: [east|west]
\newcommand{\cseqadversary}[2][east]{
    \cseqcompute{A}{#2}{#1};
}
% Distinguisher computation
\newcommand{\cseqdistinguisher}[1]{
    \cseqcompute{D}{#1}{east};
}


% Message from adversary to challenger
\newcommand{\send}[3]{
    \cseqmessager{A}{#1}{#2}{C}{#3}
}
% Message from challenger to adversary
\newcommand{\receive}[3]{
    \cseqmessagel{C}{#1}{#2}{A}{#3}
}
% Message from adversary to distinguisher - cryptoredux only
\newcommand{\invoke}[3]{
    \cseqmessagel{A}{#1}{#2}{D}{#3}
}
% Message from distinguisher to adversary - cryptoredux only
\newcommand{\return}[3]{
    \cseqmessager{D}{#1}{#2}{A}{#3}
}


% Arguments: Identifier (used as label) | description | challengername
\NewDocumentEnvironment{cryptogame}{m m m O{2.2}}
{ % Crypto-game BEGIN
    \cseqcraftfloat
    \begin{tikzpicture}

        % Set unit measurements
        \setlength{\unitlength}{1cm}
        \def\unitfactor{0.6}

        % Set counters
        \setcounter{preinstance}{0}
        \setcounter{instancecount}{0}
        \setcounter{sequencecursor}{0}
        \node[coordinate] (inst0) {};
        
        % Loop macros
        \newcommand{\cseqbeginloop}{
            \ifnum\thelooplabel=0
            \setcounter{looplabel}{\thesequencecursor}
            \stepcounter{looplabel}
            \else \PackageError{notation}{Attempting to nest loops in a cryptosequence. Close the former loop first}
            \fi
        }

        \newcommand{\cseqendloop}{
            \ifnum\thelooplabel=0
                \PackageError{notation}{No loop to close here}
            \fi
            \ifnum\thelooplabel>\thesequencecursor\relax
                \PackageError{notation}{Closing an empty loop}
            \fi
            \draw[->](A)+(-0.2, -0.15-\thesequencecursor*\unitfactor-0.7*\unitfactor)
            .. controls +(-0.6, -1.3)
            and         +(-0.6, +1.3)
            ..          +(-0.2, 0.15-\thelooplabel*\unitfactor-0.7*\unitfactor);
            \setcounter{looplabel}{0}
        }

        % Add the game's participants
        \cseqentity{A}{$\adversary$}
        \cseqentity[#4]{C}{$\challenger^{\textsc{#3}}$}

}
{ % Crypto-game END
        \ifnum\value{instancecount}>0
            \foreach \t [evaluate=\t] in {1,...,\theinstancecount}{
                \draw[dotted] (inst\t) -- ++(0,-\thesequencecursor*\unitfactor-2.2*\unitfactor);
            }
        \fi
    \end{tikzpicture}
    \ifnum\value{intransientfigure}=1
        \caption{#2}
        \label{cryptogame:#1}
        \end{figure}
        \setcounter{intransientfigure}{0}
    \fi
}



% Arguments: Identifier (used as label) | description | challenger name | distinguisher name
\NewDocumentEnvironment{cryptoredux}{m m m m O{2.2}}
{ % Crypto-game BEGIN
    \cseqcraftfloat
    \begin{tikzpicture}

        % Set unit measurements
        \setlength{\unitlength}{1cm}
        \def\unitfactor{0.6}

        % Set counters
        \setcounter{preinstance}{0}
        \setcounter{instancecount}{0}
        \setcounter{sequencecursor}{0}
        \node[coordinate] (inst0) {};
        
        % Loop macros
        \newcommand{\cseqbeginloop}{
            \ifnum\thelooplabel=0
            \setcounter{looplabel}{\thesequencecursor}
            \stepcounter{looplabel}
            \else \PackageError{notation}{Attempting to nest loops in a cryptosequence. Close the former loop first}
            \fi
        }

        \newcommand{\cseqendloop}{
            \ifnum\thelooplabel=0
                \PackageError{notation}{No loop to close here}
            \fi
            \ifnum\thelooplabel>\thesequencecursor\relax
                \PackageError{notation}{Closing an empty loop}
            \fi
            \draw[->](D)+(-0.2, -0.15-\thesequencecursor*\unitfactor-0.7*\unitfactor)
            .. controls +(-0.6, -1.3)
            and         +(-0.6, +1.3)
            ..          +(-0.2, 0.15-\thelooplabel*\unitfactor-0.7*\unitfactor);
            \setcounter{looplabel}{0}
        }

        % Add the reduction's participants
        \cseqentity{D}{$\distinguisher^{\textsc{#4}}$}
        \cseqentity[#5]{A}{$\adversary$}
        \cseqentity[#5]{C}{$\challenger^{\textsc{#3}}$}

}
{ % Crypto-game END
        \ifnum\value{instancecount}>0
            \foreach \t [evaluate=\t] in {1,...,\theinstancecount}{
                \draw[dotted] (inst\t) -- ++(0,-\thesequencecursor*\unitfactor-2.2*\unitfactor);
            }
        \fi
    \end{tikzpicture}
    \ifnum\value{intransientfigure}=1
        \caption{#2}
        \label{cryptoredux:#1}
        \end{figure}
        \setcounter{intransientfigure}{0}
    \fi
}

% Apply paragraph spacing
%\setlength{\parskip}{1em}
%\usepackage{indentfirst}

% Put all formulae in display style for fractions, binomial coefficients, etc.
%\everymath{\displaystyle}
